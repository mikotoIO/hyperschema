// Generated by Hyperschema compiler. Do not edit manually!
import { z } from "zod";
import { HyperschemaClient, RootService } from "@hyperschema/client";

export const Pet = z.object({
  name: z.string(),
});
export type Pet = z.infer<typeof Pet>;

export const Person = z.object({
  name: z.string(),
  age: z.number().int(),
  isAwesome: z.boolean(),
  avatar: z.nullable(z.string()),
  pet: z.array(Pet),
});
export type Person = z.infer<typeof Person>;

export class ChildService {
  readonly PATH = "child";

  constructor(protected client: HyperschemaClient) {}
  add2(input: { x: number; y: number }): Promise<number> {
    return this.client.call("child/add2", input);
  }
}

export class MainService extends RootService {
  readonly PATH = "";
  readonly child = new ChildService(this.client);

  constructor(protected client: HyperschemaClient) {
    super();
    this.child = new ChildService(this.client);
  }
  add(input: { x: number; y: number }): Promise<number> {
    return this.client.call("add", input);
  }
  hello(input: { person: Person }): Promise<string> {
    return this.client.call("hello", input);
  }

  onTick(cb: (data: number) => void): () => void {
    return this.client.on("onTick", cb);
  }
}
